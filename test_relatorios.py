#!/usr/bin/env python3
"""
Testes b√°sicos para as novas funcionalidades de relat√≥rios
"""
import requests
import json
import sys
from datetime import datetime, date


def test_report_endpoints():
    """Testa os endpoints de relat√≥rio com dados de exemplo"""
    base_url = "http://localhost:8080"
    
    # Primeiro, seria necess√°rio fazer login e obter cookie de sess√£o
    # Para simplicidade, este teste assume que o usu√°rio est√° logado
    
    print("=== TESTE DOS ENDPOINTS DE RELAT√ìRIOS ===")
    
    endpoints = [
        "/api/stats/comparativo_periodo",
        "/api/stats/pico_horarios", 
        "/api/stats/por_atendente"
    ]
    
    for endpoint in endpoints:
        print(f"\nTestando: {endpoint}")
        try:
            response = requests.get(f"{base_url}{endpoint}")
            print(f"Status: {response.status_code}")
            
            if response.status_code == 401:
                print("‚ö†Ô∏è  Endpoint requer autentica√ß√£o (esperado)")
            elif response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Dados retornados: {len(data.get('labels', []))} itens")
            else:
                print(f"‚ùå Erro inesperado: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")
    
    print("\n=== TESTE DOS ENDPOINTS DE EXPORTA√á√ÉO ===")
    
    export_endpoints = [
        "/api/export/csv?tipo=por_duvida",
        "/api/export/csv?tipo=detalhado",
        "/api/export/pdf?tipo=por_duvida", 
        "/api/export/pdf?tipo=detalhado"
    ]
    
    for endpoint in export_endpoints:
        print(f"\nTestando: {endpoint}")
        try:
            response = requests.get(f"{base_url}{endpoint}")
            print(f"Status: {response.status_code}")
            
            if response.status_code == 401:
                print("‚ö†Ô∏è  Endpoint requer autentica√ß√£o (esperado)")
            elif response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                content_length = len(response.content)
                print(f"‚úÖ Arquivo gerado: {content_type}, {content_length} bytes")
            else:
                print(f"‚ùå Erro inesperado: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")


def validate_api_structure():
    """Valida a estrutura das respostas da API"""
    print("\n=== VALIDA√á√ÉO DA ESTRUTURA DAS APIs ===")
    
    # Estruturas esperadas para cada endpoint
    expected_structures = {
        "por_duvida": ["labels", "counts", "total"],
        "por_dia": ["labels", "counts"],
        "comparativo_periodo": ["labels", "counts", "periodo", "total"],
        "pico_horarios": ["labels", "counts", "total"],
        "por_atendente": ["labels", "counts", "total"]
    }
    
    for api_name, expected_fields in expected_structures.items():
        print(f"\nüìã Estrutura esperada para {api_name}:")
        for field in expected_fields:
            print(f"   - {field}")


def generate_test_data():
    """Gera alguns dados de teste via API (requer autentica√ß√£o)"""
    print("\n=== DADOS DE TESTE ===")
    print("Para testes completos, adicione dados via interface:")
    print("1. Fa√ßa login no sistema")
    print("2. Cadastre algumas liga√ß√µes com diferentes:")
    print("   - Tipos de d√∫vida")
    print("   - Hor√°rios")
    print("   - Atendentes")
    print("3. Execute os testes novamente")


if __name__ == "__main__":
    print("üß™ TESTE DO SISTEMA DE RELAT√ìRIOS AVAN√áADO")
    print("=" * 50)
    
    # Verificar se o servidor est√° rodando
    try:
        response = requests.get("http://localhost:8080/", timeout=5)
        if response.status_code in [200, 302]:  # 302 = redirect para login
            print("‚úÖ Servidor est√° rodando")
        else:
            print(f"‚ö†Ô∏è  Servidor retornou c√≥digo {response.status_code}")
    except Exception as e:
        print(f"‚ùå Servidor n√£o est√° acess√≠vel: {e}")
        print("   Certifique-se de que o servidor est√° rodando em localhost:8080")
        sys.exit(1)
    
    test_report_endpoints()
    validate_api_structure()
    generate_test_data()
    
    print("\n" + "=" * 50)
    print("‚úÖ TESTES CONCLU√çDOS")
    print("üìñ Veja RELATORIOS.md para documenta√ß√£o completa")